spring:
  application:
    name: stockcrawler
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
    default-property-inclusion: non_null
  datasource:
    name: authDB
    url: jdbc:mysql://localhost:3306/financial?useUnicode=true&characterEncoding=UTF8&useSSL=false
    username: root
    password: Passw0rd
    # 使用druid数据源
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.jdbc.Driver
    filters: stat
    maxActive: 20
    initialSize: 1
    maxWait: 60000
    minIdle: 1
    timeBetweenEvictionRunsMillis: 60000
    minEvictableIdleTimeMillis: 300000
    validationQuery: select 'x'
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    poolPreparedStatements: true
    maxOpenPreparedStatements: 20
  redis:
    host: localhost
    password: ~ ##redis密码，没有的话就用~填充
    port: 6379
    pool:
      ## 连接池最大连接数（使用负值表示没有限制）
      max-active: 8
      ## 连接池最大阻塞等待时间（使用负值表示没有限制）
      max-wait: 100000
      ## 连接池中的最大空闲连接
      max-idle: 8
      ## 连接超时时间（毫秒）
    timeout: 0
#mybatis:
#  basepackage: com.github.springcloud.stockcrawler.dbdao
#  type-aliases-package: com.github.springcloud.stockcrawler.dbentity
#  #xmlLocation: classpath:mapper/**/*.xml
#  mapper-locations: classpath:mapper/**/*.xml
#  config-location: classpath:/mybatis-config.xml
#mapper:
#  mappers: com.github.springcloud.stockcrawler.MyMapper
#  not-empty: false
#  identity: MYSQL
#  style: camelhump
#  before: true

server:
  port: 27004

ribbon:
  eureka:
    enabled: true
  ReadTimeout: 60000
  ConnectTimeout: 60000
  MaxAutoRetries: 0
  MaxAutoRetriesNextServer: 1
  OkToRetryOnAllOperations: false

hystrix:
  threadpool:
    default:
      coreSize: 1000 ##并发执行的最大线程数，默认10
      maxQueueSize: 1000 ##BlockingQueue的最大队列数
      queueSizeRejectionThreshold: 500 ##即使maxQueueSize没有达到，达到queueSizeRejectionThreshold该值后，请求也会被拒绝
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 5000
eureka:
  client:
    service-url:
      defaultZone:  http://localhost:27001/eureka,http://localhost:27002/eureka

quartz:
  enabled: true

samplejob:
  frequency: 2000
#pagehelper:
#  helper-dialect: mysql
#  reasonable: true  ##pagehelper.reasonable,启用合理化时候，如果pageNo<1，则会返回第一页数据，如果pageNo>pages会查询最后一页，作为接口程序，如果传入的pageNo一直大于pages，则一直会有数据返回，前端还需要校验页码问题。建议：如果普通的分页查询，建议开启该功能，如果作为前后端分离或者提供接口之类的，建议禁用该功能
#  support-methods-arguments: true
#  params: count=countSql ##分页的时候，可以不用单独写获取总数的代码，这个参数就会帮你自动做了

logging:
  level:
   #打印SQL信息
   com.github.springcloud.stockcrawler.dbentity: debug
#   tk.mybatis.springboot.mapper: TRACE
#   tk.mybatis.simple.mapper: TRACE
  file: feiyi.log
#mybatis
mybatis-plus:
  mapper-locations: classpath:mapper/**/*.xml
  #实体扫描，多个package用逗号或者分号分隔
  typeAliasesPackage: com.github.springcloud.stockcrawler.dbentity
  #typeEnumsPackage: com.baomidou.springboot.entity.enums
  global-config:
    #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
    id-type: 3
    #字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
    field-strategy: 0
    #驼峰下划线转换
    db-column-underline: true
    #刷新mapper 调试神器
    refresh-mapper: true
    #数据库大写下划线转换
    #capital-mode: true
    #序列接口实现类配置
    #key-generator: com.baomidou.springboot.xxx
    #逻辑删除配置（下面3个配置）
    logic-delete-value: 0
    logic-not-delete-value: 1
    sql-injector: com.baomidou.mybatisplus.mapper.LogicSqlInjector
    #自定义填充策略接口实现
    #meta-object-handler: com.baomidou.springboot.xxx
    #自定义SQL注入器
    #sql-injector: com.baomidou.springboot.xxx
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
#logging
